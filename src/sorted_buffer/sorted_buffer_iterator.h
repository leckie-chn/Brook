// Copyright 2014 PKU-Cloud
// Author: Chao Ma (mctt90@gmail.com)
//
#ifndef SORTED_BUFFER_SORTED_BUFFER_ITERATOR_H_
#define SORTED_BUFFER_SORTED_BUFFER_ITERATOR_H_

#include <list>
#include <string>

#include "src/base/common.h"
#include "src/sorted_buffer/memory_piece.h"

namespace sorted_buffer {

// The interface of iterator.
class SortedBufferIterator {
 public:
  virtual ~SortedBufferIterator() {}
  virtual const std::string& key() const = 0;
  virtual const std::string& value() const = 0;
  virtual bool Done() const = 0;          // Done with values of current key.
  virtual void Next() = 0;                // Jump to the next value
  virtual void DiscardRestValues() = 0;   // Jump until all values are skipped.
};


// Traverse disk files generated by SortedBuffer for sorted map outputs.
class SortedBufferIteratorImpl : public SortedBufferIterator {
 public:
  SortedBufferIteratorImpl(const std::string& filebase,
                           int num_files);
  virtual ~SortedBufferIteratorImpl();

  virtual const std::string& key() const;
  virtual const std::string& value() const;
  virtual bool Done() const;          // Done with values of current key.
  virtual void Next();                // Jump to the next value of current key
  virtual void DiscardRestValues();   // Jump skip all values of current key.

  void NextKey();              // Jump to the next reduce input (key).
  bool FinishedAll() const;    // Done with all keys and values.

 private:
  struct SortedStringFile {
    FILE* input;
    int index;
    std::string top_key;
    std::string top_value;
    int32 num_rest_values;  // number of values of top_key left in current
                            // file. 0 means no value for the key on disk
                            // but might be one in top_key.  Negative
                            // value means "end-of-sorted_buffer".
  };

  typedef std::list<SortedStringFile*> SSFileList;

  std::string current_key_;
  std::string filebase_;
  SSFileList files_;
  SortedStringFile* merge_source_;  // The file with the minimum top_key.
                                    // merge_source_==NULL means no file is
                                    // valid and Finished() should be true.

  // Invoked by ctor. Open all block files (specified by filebase and
  // num_files).  Requires that each file contains at least one key-value pair.
  void Initialize(const std::string& filebase, int num_files);

  // Invoked by dtor.
  void Clear();

  // Returns false if file->num_rest_values <= 0
  bool LoadValue(SortedStringFile* file);

  // If no more keys exist in the file, mark it as end-of-sorted_buffer
  // and returns false.
  bool LoadKey(SortedStringFile* file);

  // Find among valid files (not end-of-sorted_buffer) for the one with
  // the minimum top_key, and point it by merge_source_.
  void RelocateMergeSource();

  // Find a valid file (not end-of-sorted_buffer) whose top_key is LESS
  // than that of merge_source_.
  SortedStringFile* FindNextMergeSourceWithEqualKey();
};

}  // namespace sorted_buffer

#endif  // SORTED_BUFFER_SORTED_BUFFER_ITERATOR_H_
