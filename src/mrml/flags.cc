// Copyright 2014 PKU-Cloud.
// Author: Chao Ma (mctt90@gmail.com)
//
//  Define flags used by agent / server to accept instructions from
//  scheduler.
//
#include "src/base/flags.h"

#include <sys/utsname.h>
#include <time.h>
#include <unistd.h>

#include <string>
#include <vector>

#include <boost/filesystem.hpp>

#include "src/base/common.h"
#include "src/base/scoped_ptr.h"
#include "gflags/gflags.h"
#include "src/mrml/mapreduce.h"
#include "src/strutil/stringprintf.h"
#include "src/strutil/split_string.h"


DEFINE_int32(num_agent_workers, 0,
             "The number of agent workers, required by server workers to "
             "check whether all agent workers had finished their work. This ");

DEFINE_int32(num_server_workers, 0,
             "The number of server workers, required bt agent workers to "
             "check whether all server workers had finished their work. This ");

DEFINE_string(agent_workers, "",
             "The set of agent workers, identified by a zero-based number"
             "such as '1:2:3:4'"
             "This flag is set for agent and server, to let them know who they are.");

DEFINE_string(server_workers, "",
             "A set of server workers, identified by a zero-based number"
             "such as '7:8:9'"
             "This flag is set for agent and server, to let them know who they are.");

DEFINE_string(mapper_class, "",
             "This flag is set only for agent workers to let them know the"
             "mapper class that they should execute. Note that this flag "
             "implies that each map worker can execute only one mapper "
             "class in its life. This might be changed in the future when we "
             "support better work load balance.");

DEFINE_string(reducer_class, "",
             "This flag is set only for server workers to let them know the "
              "reducer class that they should execute.");

DEFINE_string(cache_file_value, "",
             "A cache file which store the sub value that generated by user program."
             "Agent worker read from this file.");

DEFINE_string(cache_file_model, "",
             "A cache file which store the model that generator by agent."
             "Agent worker write to this file.")

DEFINE_string(output_files, "",
             "A server worker may generator one or more "
             "output files, each for a server output channel. Usually there "
             "is only one output channel, thus one output file per worker.");

DEFINE_string(input_format, "text",
             "The input format, can be either \"text\", \"recordio\", or \"protofile\". "
             "This flag is set only for agent workers.");

DEFINE_string(output_format, "text",
             "The output format, can be either \"text\", \"recordio\", or \"protofile\"."
             "This flag is set only for server workers.");

DEFINE_string(log_filebase, "",
             "The real log filename is log_filebase appended by worker "
             "type, worker id, date, time, process_id, log type and etc.");

//------------------------------------------------------------------------------------------------
// Poor guy's singletons:
//------------------------------------------------------------------------------------------------
typedef std::vector<std::string> StringVector;

static scoped_ptr<StringVector>& GetServerWorkers() {
    static scoped_ptr<StringVector> server_workers(new StringVector);
    return server_workers;
}

static scoped_ptr<StringVector>& GetAgentWorkers() {
    static scoped_ptr<StringVector> agent_workers(new StringVector);
    return agent_workers;
}

static scoped_ptr<StringVector>& GetOutputFiles() {
    static scoped_ptr<StringVector> output_files(new StringVector);
    return output_files;
}


//------------------------------------------------------------------------------------------------
// Flag accessors.
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Check the correctness of flags.
//------------------------------------------------------------------------------------------------
bool ValidateCommandLineFlags() {
    bool flags_valid = true;

    // check the number of server workers. Validates NumServerWorkers();
    SplitStringUsing(FLAGS_server_workers, ",", GetServerWorkers().get());
    if (GetServerWorkers()->size() != FLAGS_num_server_workers) {
        LOG(ERROR) << "num server worker set error.";
        flags_valid = false;
    }

    // check the number of agent workers. Validates NumAgentWorkers().
    SplitStringUsing(FLAGS_agent_workers, ",", GetAgentWorkers().get());
    if (GetAgentWorkers()->size() != FLAGS_num_agent_workers) {
        LOG(ERROR) << "num agent worker set error.";
        flags_valid = false;
    }

    // If input file format is unknow, set it to text.
    if (FLAGS_input_format != "text" &&
        FLAGS_input_format != "recordio" &&
        FLAGS_input_format != "protofile")
    {
        LOG(ERROR) << "Unknow input_format: " << FLAGS_input_format;
        flags_valid = false;
    }

    // If output file format is unknow, set it to text.
    if (FLAGS_output_format != "text" &&
        FLAGS_output_format != "recordio" &&
        FLAGS_output_format != "protofile") 
    {
        LOG(ERROR) << "Unknow output_format: " << FLAGS_output_format;
        flags_valid = false;
    }

    // Agent worker must be cache_file_value specified.
    if (IAmAgentWorker()) {
        if (FLAGS_cache_file_value.empty()) {
            LOG(ERROR) << "For a agent worker, cache_file_value must be setted.";
            flags_valid = false;
        }
    }

    // Agent worker must be cache_file_model specified.
    if (IAmAgentWorker()) {
        if (FLAGS_cache_file_model.empty()) {
            LOG(ERROR) << "For a agent worker, cache_file_value must be setted.";
            flags_valid = false;
        }
    }

    // Server worker must be output_files specified.
    if (!IAmAgentWorker()) {
        if (FLAGS_output_files.empty()) {
            LOG(ERROR) << "For a server worker, output file must be setted.";
            flags_valid = false;
        }
    }

    // Agent worker must be mapper_class specified.


    // Server worker must be reducer_class specified.

    return flags_valid;
}
